// snapbox
// HTTP Client Library for Jule
// https://github.com/adamperkowski/snapbox
// Copyright (c) 2025, Adam Perkowski
// BSD 3-Clause License

#pass "-lcurl"

use "header"
use "status"

cpp use "internal/curlwrapper.hpp"

#typedef
cpp struct getResponse {
	body:   str
	status: status::StatusCode
}

cpp fn get(str, []str, int, bool): cpp.getResponse
cpp fn post(str, str, []str, int): cpp.getResponse
cpp fn download(str, str): bool

struct getRequest {
	url:         str
	mut headers: header::HeaderMap
	head:        bool
}

impl getRequest {
	fn Send(self): cpp.getResponse {
		headers := header::Slice(self.headers)
		ret cpp.get(self.url, headers, len(headers), self.head)
	}

	fn Headers(self, headers: header::HeaderMap): getRequest {
		self.headers = headers
		ret self
	}
}

struct postRequest {
	url:         str
	mut data:    str
	mut headers: header::HeaderMap
}

impl postRequest {
	fn Send(self): cpp.getResponse {
		headers := header::Slice(self.headers)
		ret cpp.post(self.url, self.data, headers, len(headers))
	}

	fn Headers(self, headers: header::HeaderMap): postRequest {
		self.headers = headers
		ret self
	}

	fn Data(self, data: str): postRequest {
		self.data = data
		ret self
	}
}

fn GET(url: str): getRequest {
	ret getRequest{
		url: url,
		head: false,
	}
}

fn HEAD(url: str): getRequest {
	ret getRequest{
		url: url,
		head: true,
	}
}

fn POST(url: str): postRequest {
	ret postRequest{
		url: url,
	}
}

fn Download(url: str, path: str)! {
	response := cpp.download(url, path)
	if !response {
		panic("Download failed")
	}
}