/*
snapbox
HTTP Client Library for Jule
https://github.com/adamperkowski/snapbox
Copyright (c) 2025, Adam Perkowski
BSD 3-Clause License
*/

#pass "-lcurl"

use "snapbox/header"
use "snapbox/status"

cpp use "snapbox/internal/curlwrapper.hpp"

#typedef
cpp struct Response {
	body:   str
	status: status::StatusCode
}

/* args: url, headers, method */
cpp fn request(str, []str, int): cpp.Response

/* args: url, data, headers, method */
cpp fn post(str, str, []str, int): cpp.Response

/* args: url, path */
cpp fn download(str, str): bool

// Request structure for non-data requests.
struct Request {
	url:         str
	mut headers: header::HeaderMap
	method:      int // 0 = GET, 1 = HEAD
}

impl Request {
	// Executes the request and returns the response.
	fn Send(*self): cpp.Response {
		headers := header::Slice(self.headers)
		ret cpp.request(self.url, headers, self.method)
	}

	// Sets headers for the request.
	fn Headers(*self, headers: header::HeaderMap): Request {
		self.headers = headers
		ret *self
	}
}

// Request structure for data requests.
struct DataRequest {
	url:         str
	mut data:    str
	mut headers: header::HeaderMap
	method:      int // 0 = POST, 1 = PUT, 2 = DELETE
}

impl DataRequest {
	// Executes the request and returns the response.
	fn Send(*self): cpp.Response {
		headers := header::Slice(self.headers)
		ret cpp.post(self.url, self.data, headers, self.method)
	}

	// Sets headers for the request.
	fn Headers(*self, headers: header::HeaderMap): DataRequest {
		self.headers = headers
		ret *self
	}

	// Sets data for the request.
	fn Data(*self, data: str): DataRequest {
		self.data = data
		ret *self
	}
}

// Builds a GET request object.
fn GET(url: str): Request {
	ret Request{
		url: url,
		method: 0,
	}
}

// Builds a HEAD request object.
fn HEAD(url: str): Request {
	ret Request{
		url: url,
		method: 1,
	}
}

// Builds a POST request object.
fn POST(url: str): DataRequest {
	ret DataRequest{
		url: url,
		method: 0,
	}
}

// Builds a PUT request object.
fn PUT(url: str): DataRequest {
	ret DataRequest{
		url: url,
		method: 1,
	}
}

// Builds a DELETE request object.
fn DELETE(url: str): DataRequest {
	ret DataRequest{
		url: url,
		method: 2,
	}
}

// Uses the internal C++ function to download a file from the given URL and save it to the given path.
fn Download(url: str, path: str)! {
	response := cpp.download(url, path)
	if !response {
		panic("Download failed")
	}
}