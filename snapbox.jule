// snapbox
// HTTP Client Library for Jule
// https://github.com/adamperkowski/snapbox
// Copyright (c) 2025, Adam Perkowski
// BSD 3-Clause License

#pass "-lcurl"

use "header"
use "status"

cpp use "internal/curlwrapper.hpp"

#typedef
cpp struct response {
	body:   str
	status: status::StatusCode
}

// args: url, headers, headerCount, method
cpp fn request(str, []str, int, int): cpp.response

// args: url, data, headers, headerCount, method
cpp fn post(str, str, []str, int, int): cpp.response

// args: url, path
cpp fn download(str, str): bool

struct request {
	url:         str
	mut headers: header::HeaderMap
	method:      int // 0 = GET, 1 = HEAD
}

impl request {
	fn Send(self): cpp.response {
		headers := header::Slice(self.headers)
		ret cpp.request(self.url, headers, len(headers), self.method)
	}

	fn Headers(self, headers: header::HeaderMap): request {
		self.headers = headers
		ret self
	}
}

struct postRequest {
	url:         str
	mut data:    str
	mut headers: header::HeaderMap
	method:      int // 0 = POST, 1 = PUT, 2 = DELETE
}

impl postRequest {
	fn Send(self): cpp.response {
		headers := header::Slice(self.headers)
		ret cpp.post(self.url, self.data, headers, len(headers), self.method)
	}

	fn Headers(self, headers: header::HeaderMap): postRequest {
		self.headers = headers
		ret self
	}

	fn Data(self, data: str): postRequest {
		self.data = data
		ret self
	}
}

fn GET(url: str): request {
	ret request{
		url: url,
		method: 0,
	}
}

fn HEAD(url: str): request {
	ret request{
		url: url,
		method: 1,
	}
}

fn POST(url: str): postRequest {
	ret postRequest{
		url: url,
		method: 0,
	}
}

fn PUT(url: str): postRequest {
	ret postRequest{
		url: url,
		method: 1,
	}
}

fn DELETE(url: str): postRequest {
	ret postRequest{
		url: url,
		method: 2,
	}
}

fn Download(url: str, path: str)! {
	response := cpp.download(url, path)
	if !response {
		panic("Download failed")
	}
}